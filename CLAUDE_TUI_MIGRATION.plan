# PRT TUI Migration Plan
# Generated: 2025-08-29
# Purpose: Comprehensive plan to address Issues #68-72 via Textual, preparing for future Flet migration
# Status: Phase 1 COMPLETE ✅ | Phase 2 READY

## Overview
This plan addresses the CLI UX issues (#68-72) by implementing Textual for improved TUI and web interface,
while architecting for future Flet mobile deployment.

## Key Architectural Decisions
1. Core operations MUST be UI-agnostic (enables Flet later)
2. Search uses SQLite FTS5 (fast, portable, works on mobile)
3. Autocomplete is centralized (one engine, multiple UIs)
4. Validation is in core layer (consistent across platforms)
5. Screens are thin (UI only, no business logic)

## Implementation Patterns (Established in Phase 1)
1. **Error handling with logging and fallbacks** - Never crash, always provide safe defaults
2. **Memory-bounded collections** - Implement MAX_SIZE limits for long-running stability
3. **Comprehensive test coverage** - Include error scenarios and edge cases
4. **Use existing search infrastructure** - Don't reinvent what Phase 1 built
5. **Logger usage instead of print** - Use `get_logger(__name__)` for all output
6. **Scale target: 5000+ contacts** - All components must handle this efficiently

## Status Markers
- [ ] Not Started
- [🔄] In Progress  
- [✅] Completed
- [❌] Blocked
- [⏭️] Skipped

## Phase Tracking

### Phase 0: Architecture Preparation
**Goal:** Separate business logic from UI for future platform portability

- [✅] Task 0.1: Create Core Operations Layer
  - Location: `prt_src/core/operations.py`
  - Extract business logic from CLI
  - Remove all Rich/console dependencies
  - Return data, not formatted output

- [✅] Task 0.2: Create Platform Abstraction Layer
  - Location: `prt_src/platforms/`
  - Create base classes for platform-specific code
  - Prepare for terminal/web/mobile variants

### Phase 1: Database & Search Infrastructure ✅ COMPLETE
**Goal:** Build fast search and indexing for 5000+ contacts
**Parallelizable:** Tasks 1.1, 1.2, 1.3 can run simultaneously

- [✅] Task 1.1: Add FTS5 Virtual Tables [PARALLEL] - PR #73 (Merged)
  - Create migrations/add_fts5_support.sql
  - Add contacts_fts, notes_fts, tags_fts virtual tables
  - Add synchronization triggers
  - Update SchemaManager

- [✅] Task 1.2: Build Search Indexer [PARALLEL] - PR #74 (Merged)
  - Location: `prt_src/core/search_index/indexer.py`
  - Implement SearchIndexer class
  - Add incremental updates
  - Create result ranking

- [✅] Task 1.3: Create Contact Search Cache [PARALLEL] - PR #75 (Merged)
  - Location: `prt_src/core/search_cache/contact_cache.py`
  - Build LRU cache
  - Implement prefix trie for autocomplete
  - Add cache warming

- [✅] Task 1.4: Implement Unified Search API [DEPENDS: 1.1, 1.2] - PR #77
  - Location: `prt_src/core/search_unified.py`
  - Search across all entities
  - Group results by type
  - Add search suggestions

### Phase 2: Core Components Library
**Goal:** Build reusable components for Textual and future Flet
**Parallelizable:** All tasks can run simultaneously

#### Integration Guidelines:
- Components must be UI-framework agnostic (no Textual imports in core)
- Should integrate with existing search infrastructure where applicable
- Must handle 5000+ contacts efficiently
- Components can be aware of each other but loosely coupled

- [ ] Task 2.1: Create Autocomplete Engine [PARALLEL]
  - Location: `prt_src/core/components/autocomplete.py`
  - UI-agnostic autocomplete logic
  - Fuzzy matching (consider using existing SearchIndexer for scoring)
  - Context-aware suggestions based on:
    - Current entity type (contact/tag/note)
    - User search history (from UnifiedSearchAPI._search_history)
    - Popular searches (from UnifiedSearchAPI._popular_searches)
  - **Integration:** Should wrap/enhance existing ContactSearchCache.autocomplete()
  - **Example:** When typing "Joh", suggest "John Smith" if recently searched

- [ ] Task 2.2: Build Pagination System [PARALLEL]
  - Location: `prt_src/core/components/pagination.py`
  - Alphabetical jump (A-Z navigation for contact lists)
  - Position memory (remember last viewed page per list type)
  - Lazy loading (fetch pages on demand, not all 5000 at once)
  - **Integration:** Works with search results from UnifiedSearchAPI
  - **Example:** Jump to "S" section, remember user was on page 3 of "S" contacts
  - **Performance:** Must paginate 5000+ items smoothly

- [ ] Task 2.3: Create Selection System [PARALLEL]
  - Location: `prt_src/core/components/selection.py`
  - Multi-select logic (checkbox-style selection tracking)
  - Filter/sort capabilities:
    - By name (alphabetical)
    - By date added (newest/oldest)
    - By relationship count
    - By tag presence
  - Selection history (remember recent selections for quick re-select)
  - **Integration:** Maintains selection state across pagination changes
  - **Example:** Select 10 contacts, change page, selections persist

- [ ] Task 2.4: Build Validation System [PARALLEL]
  - Location: `prt_src/core/components/validation.py`
  - Entity validators:
    - Contact: email format, phone normalization, required fields
    - Tag: no special characters, max length
    - Note: title required, content max length
    - Relationship: prevent self-relationships, validate dates
  - Deduplication detection (find similar contacts by name/email/phone)
  - Data sanitization (strip whitespace, normalize phone numbers)
  - **Integration:** Used by all create/update operations in core
  - **Example:** Detect "John Smith" vs "john smith" as potential duplicate

### Phase 3: Textual UI Framework
**Goal:** Build Textual application structure and widgets

- [ ] Task 3.1: Setup Textual Application Structure
  - Location: `prt_src/tui/app.py`
  - Main application class
  - CSS styling (styles.css)
  - Keybindings configuration

- [ ] Task 3.2: Build Base Widgets [PARALLEL GROUP A]
  - Location: `prt_src/tui/widgets/base.py`
  - LoadingIndicator, ErrorBoundary
  - ToastNotification, ConfirmDialog

- [ ] Task 3.3: Create Contact Selector Widget [PARALLEL GROUP A]
  - Location: `prt_src/tui/widgets/contact_selector.py`
  - Autocomplete integration
  - Visual preview
  - Keyboard navigation

- [ ] Task 3.4: Build Data Table Widget [PARALLEL GROUP A]
  - Location: `prt_src/tui/widgets/data_table.py`
  - Pagination support
  - Column sorting
  - Row selection

- [ ] Task 3.5: Create Backup List Widget [PARALLEL GROUP A]
  - Location: `prt_src/tui/widgets/backup_list.py`
  - Game save-style UI
  - Backup preview
  - Restore confirmation

### Phase 4: Screen Implementations
**Goal:** Implement screens addressing Issues #68-72

- [ ] Task 4.1: Implement Main Screen
  - Location: `prt_src/tui/screens/main.py`
  - Navigation menu
  - Status bar
  - Quick actions

- [ ] Task 4.2: Build Contacts Screen [DEPENDS: 3.3, 3.4]
  - Location: `prt_src/tui/screens/contacts.py`
  - **Addresses Issue #68:**
    - Paginated list with A-Z jump
    - "Switch to Search" action
    - Contact preview pane

- [ ] Task 4.3: Create Relationships Screen [DEPENDS: 3.3]
  - Location: `prt_src/tui/screens/relationships.py`
  - **Addresses Issue #69:**
    - Dual contact selector
    - Relationship type selector
    - Edit/Delete combined function
    - Remove "View Relationships" menu item

- [ ] Task 4.4: Build Search Screen [DEPENDS: 1.4, 2.1]
  - Location: `prt_src/tui/screens/search.py`
  - **Addresses Issue #70:**
    - Full-text search on all contact info
    - Search by tags/notes
    - Search by relationship type to YOU
    - Export results

- [ ] Task 4.5: Implement Database Screen [DEPENDS: 3.5]
  - Location: `prt_src/tui/screens/database.py`
  - **Addresses Issue #71:**
    - Combined Status/Test/Statistics view
    - Game-style backup/restore
    - Backup notes and pagination

### Phase 5: Enhanced Relationship Types
**Goal:** Expand relationship types per Issue #69

- [ ] Task 5.1: Expand Relationship Types Data [PARALLEL]
  - Add extended family (aunt, uncle, niece, nephew)
  - Add grandparent/grandchild
  - Add in-law relationships
  - Add cousin relationships (first, second)

- [ ] Task 5.2: Create Relationship Type Manager [PARALLEL]
  - Location: `prt_src/core/relationships/type_manager.py`
  - Relationship inference
  - Symmetric handling

### Phase 6: Integration & Migration
**Goal:** Integrate Textual with existing CLI

- [ ] Task 6.1: Create CLI Router
  - Update `prt_src/cli.py`
  - Add --tui flag (make default)
  - Add --classic flag for old CLI

- [ ] Task 6.2: Build Web Server Wrapper
  - Location: `prt_src/web.py`
  - FastAPI wrapper for Textual-web
  - Authentication middleware

- [ ] Task 6.3: Create Migration Utilities
  - Settings migration
  - Backup compatibility

### Phase 7: Testing & Polish
**Goal:** Ensure quality and usability

- [ ] Task 7.1: Create Test Suites [PARALLEL GROUP B]
  - Widget unit tests
  - Screen integration tests
  - Performance tests (5000+ contacts)

- [ ] Task 7.2: Build Demo Mode [PARALLEL GROUP B]
  - Demo data generator
  - Guided tour

- [ ] Task 7.3: Add Telemetry [PARALLEL GROUP B]
  - Usage tracking (opt-in)
  - Performance monitoring

### Phase 8: Future-Proofing for Flet
**Goal:** Prepare for mobile deployment

- [ ] Task 8.1: Create UI Abstraction Layer
  - Location: `prt_src/ui/`
  - Abstract UI interfaces
  - Platform-agnostic events

- [ ] Task 8.2: Document Platform APIs
  - Document core operations
  - UI component contracts

## Critical Path
Minimum path to address Issues #68-72:
Phase 0 → Phase 1.1 & 1.2 → Phase 1.4 → Phase 3.1 → Phase 4.1-4.5 → Phase 6.1

## Parallelization Groups
**Group A (UI Components):**
- Tasks 3.2, 3.3, 3.4, 3.5

**Group B (Infrastructure):**
- Tasks 1.1, 1.2, 1.3, 2.1, 2.2, 2.3, 2.4

**Group C (Testing/Polish):**
- Tasks 7.1, 7.2, 7.3

## Dependencies to Add
```
textual>=0.47.0
textual-dev>=1.3.0
pyperclip>=1.8.2
aiofiles>=23.2.1
lru-dict>=1.3.0
pygtrie>=2.5.0
```

## Issue Mapping
- Issue #68 (View Contacts): Task 4.2
- Issue #69 (Manage Relationships): Tasks 4.3, 5.1
- Issue #70 (Search): Tasks 1.1-1.4, 4.4
- Issue #71 (Database Management): Task 4.5
- Issue #72 (Meta): All phases

## Notes for Future Claude Sessions
1. Check task status markers before starting work
2. Update status markers after completing tasks
3. Tasks marked [PARALLEL] can be assigned to subagents
4. Dependencies are noted with [DEPENDS: x.x]
5. This plan assumes Textual now, Flet later architecture
6. Core business logic must remain UI-agnostic

## Phase 2 Context (For LLMs Starting Fresh)
### What's Already Built (Phase 1)
- **FTS5 search**: Full-text search with BM25 ranking (`prt_src/core/search_index/`)
- **Contact cache**: LRU cache with prefix trie (`prt_src/core/search_cache/`)
- **Unified Search API**: Integrated search with error handling (`prt_src/core/search_unified.py`)
- **Core operations**: UI-agnostic business logic (`prt_src/core/`)

### Architecture Notes
- **Single-threaded currently**: No async/threading yet, but Textual may introduce it
- **Single DB session**: `self.db.session` - will need connection pooling if concurrent
- **Logging configured**: Use `from prt_src.logging_config import get_logger`
- **Pre-commit hooks**: `ruff` and `black` run automatically on commit

### Phase 2 Tips
- Task 2.1 (Autocomplete): Can leverage existing prefix trie from ContactSearchCache
- Task 2.2 (Pagination): Must handle 5000+ contacts efficiently
- Task 2.3 (Selection): Consider thread-safety if Textual adds concurrency
- Task 2.4 (Validation): Follow established error handling patterns

## Progress Tracking
Last Updated: 2025-08-29
Current Phase: Phase 1 COMPLETE ✅ | Phase 2 READY TO START
Completed Tasks: 6/32 (Phase 0: 2/2 ✅, Phase 1: 4/4 ✅)
Completed PRs: #73, #74, #75, #77 (All Phase 1 tasks merged)
Next Action: Begin Phase 2 - Core Components Library (4 parallel tasks)