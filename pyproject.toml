[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "prt"
version = "1.0.0"
description = "Personal Relationship Tracker - Modern TUI for managing personal relationships and contacts"
authors = [
    {name = "Rich Bodo", email = "richbodo@gmail.com"}
]
readme = "README.md"
license = {text = "MIT"}
keywords = ["contacts", "relationships", "tui", "personal-data", "sqlite"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License", 
    "Operating System :: MacOS",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9", 
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Database :: Front-Ends",
    "Topic :: Office/Business :: Groupware",
    "Topic :: Terminals",
]
requires-python = ">=3.8"
dependencies = [
    "typer>=0.12.0",
    "textual>=0.47.0", 
    "rich>=13.0.0",
    "sqlalchemy>=2.0.0",
    "aiofiles>=23.2.1",
    "lru-dict>=1.3.0",
    "pygtrie>=2.5.0",
    "google-api-python-client>=2.0.0",
    "google-auth-httplib2>=0.1.0", 
    "google-auth-oauthlib>=1.0.0",
    "vobject>=0.9.6.1",
    "requests>=2.31.0",
    "pillow>=10.0.0",
    "jinja2>=3.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pre-commit>=3.0.0",
    "ruff>=0.7.0",
    "black>=24.0.0", 
    "textual-dev>=1.3.0",
    "pyperclip>=1.8.2",
]
ai = [
    "langchain>=0.1.0",
    "transformers>=4.30.0",
    "accelerate>=0.20.0",
    "torch>=2.0.0",
]
eval = [
    "promptfoo>=0.60.0",
]

[project.urls]
Homepage = "https://github.com/richbodo/prt"
Repository = "https://github.com/richbodo/prt"
Issues = "https://github.com/richbodo/prt/issues"
Documentation = "https://github.com/richbodo/prt/blob/main/docs/"

[project.scripts]
prt = "prt_src.__main__:main"
prt-cli = "prt_src.cli:app"

# ========================================
# TOOL CONFIGURATIONS
# ========================================

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | prt_env
)/
'''

[tool.ruff]
line-length = 100
target-version = "py38"
exclude = [
    ".eggs",
    ".git", 
    ".hg",
    ".mypy_cache",
    ".tox",
    ".venv",
    "_build",
    "buck-out", 
    "build",
    "dist",
    "prt_env",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "PIE", # flake8-pie
    "SIM", # flake8-simplify
]
ignore = [
    "E501",   # Line too long (handled by black)
    "B008",   # Do not perform function calls in argument defaults
    "UP007",  # Use X | Y for union types (Python 3.8 compatibility)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["S101"]  # Allow assert in tests

[tool.ruff.lint.isort]
known-first-party = ["prt_src"]
force-single-line = true

[tool.isort]
profile = "black"
line_length = 100
known_first_party = ["prt_src"]
force_single_line = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--tb=short",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
# Enable automatic asyncio support for Textual tests
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["prt_src"]
omit = [
    "tests/*",
    "prt_env/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
